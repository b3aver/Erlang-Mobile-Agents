'-------------------------------------------------------------------
' @author Paolo C Sberna <reliablebeaver86-cs@yahoo.it>
' @copyright (C) 2012, Paolo C Sberna
' @doc
'
' Sequence Diagrams created with PlantUML http://plantuml.sourceforge.net
'
' @end
' Created : 20 Jul 2012 by Paolo C Sberna <reliablebeaver86-cs@yahoo.it>
'-------------------------------------------------------------------

@startuml img/sequence_start_agents.png
[-> manager@node1: start_agent(agent1, Module, Function, Arguments, Dependencies)
'manager@node1 -> manager@node1: register(agent1)
note over manager@node1: save agent1's informations \nin the internal state
manager@node1 -> agents_sup@node1: start_agent(agent1, Module, Function, Arguments)
create agent1@node1
agents_sup@node1 -> agent1@node1: Module:Function(Arguments)
note left agent1@node1: agent1 now runs on node1
@enduml


@startuml img/sequence_migration.png
activate agent1@node1 
' [-> agent1@node1: migrate(Node2, Function, Arguments)
agent1@node1 -> manager@node1: migrate(agent1, node2, Function, Arguments)
note over manager@node1: retrieves Module and Dependencies of agent1
' manager@node1 -> platform@node0: lookfor_container(node2)
' platform@node0 -> manager@node1: manager@node2
' manager@node1 -> manager@node2: start_agent(agent1, Module, Function, Arguments)
manager@node1 -> manager@node2: host_agent(agent1, Module, Function,\n                Arguments, Dependencies)
group foreach Mod in [Module|Dependencies]
  group if manager@node2 hasn't got Mod
    manager@node2 -> manager@node1: get_module(Mod)
    activate manager@node1   
    manager@node1 -> manager@node2: <<Mod>>
    deactivate manager@node1
  end
end
note over manager@node2: save agent1's informations \nin the internal state
manager@node2 -> agents_sup@node2: start_agent(agent1, Module, Function, Arguments)
create agent1@node2
agents_sup@node2 -> agent1@node2: Module:Function(Arguments)
note left agent1@node2: agent1 now runs on node2
manager@node2 <- agents_sup@node2: ok
manager@node1 <- manager@node2: ok
note over manager@node1: sets agent1's state as migrated
agent1@node1 <-manager@node1: exit
destroy agent1@node1 
@enduml


@startuml img/sequence_container_registration.png
container@node1 -> platform@node0: register(ContainerPid)
'platform@node0 -> platform@node0: db_insert(ContainerPid)
note over platform@node0:  db_insert(ContainerPid)\nplatform save ContainerPid
platform@node0 -> container@node1: ok
@enduml


@startuml img/sequence_agent_normal_termination.png
activate agent_loop
activate agent
activate manager
agent_loop --> agent: {'EXIT', pid, normal}
destroy agent_loop
agent -> agent: handle_info -> {stop, normal, NewState}
destroy agent
agent --> manager: {'DOWN', Reference, process, Pid, normal}
manager -> manager: handle_info
note right manager: in State manager sets agent as terminated
@enduml
